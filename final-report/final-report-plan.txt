Title
Abstract
Introduction
- Problem Statement ()
- Motivation? (ASk first)
- Objective
Background - http://www.speech.cs.cmu.edu/tools/lmtool-new.html
The details (Implementation)
Testing
Evaluation/Discussion
Conclusions and further work (library, conferencing)
Bibliography
(Appendices)

---

__Design__
- Platform choice
- System UML Overview
- Game Design Overview
- NLP Techniques used


Overview:
- Chose Android

System Overview:
Explain slot filling approach
NLP techniques (semanitc similarity)

Explain each step in the flow chart in more detail.

Show a UML diagram of the following:
- MainActivity
- VoiceControl
- GameState
- VoiceProcess (actual NLP engine)
- SemanticSimilarity (singleton, mention Android activity states)
Explain each one

Explain QOL features:
- synonyms
- match ignores
- Confirmation
- multiple commands
- sentence mapping
- multiple targets

Game Design Overview:
- Battle, Overworld, Zork-like
- Show UML class diagram

Game Design Extensions:
- Room descriptions
- Properties of objects (PhysicalObject)

- Performance Engineering (none)


__Implementation__

High Level System Diagram:

- Front-end:
-- Main Activity (VoiceControl)
-- Settings Activity
-- Video Conferencing Activity (VoiceControl)
- Backend:
-- GlobalState
-- VoiceProcess
-- Semantic Similarity
- WordNet Database

- Explain what an Activity is

User Flow Diagram (Wireframes)

UI:

Data Flow Diagram (VoiceProcess class)

General code
- GlobalState
- VoiceProcess
- SemanticSimiliarty
- AmbiguousHandler
- CustomLexicalDatabase
- ContextActionMaps and Action
- Entity
- Action
- Synonym Map code
-- Utensil room in appendix    TODO
- SentenceMapper
- MultipleCommandProcess

CustomLexicalDatabase: mention meronyms, holonyms, etc.

Custom Lesk: mention use of Fernflower decompiler and altered code.

Game implementation:
- "Simple demo rooms were created to demonstrate the system applied to different
settings"
- GameState
- Battle impl (show map)
-- Enemies
-- Inventory and Items
- Overworld impl (show map)
-- Physical Objects
-- Rooms and Room generation
---- General
---- room description (show previous versions in appendix)
---- Add Roomobjects (lamda expressions, boolean suppliers)
---- Example of room1
---- Room generation



Settings UI

Call Example
- Call UI
- Call table (full class in Appendix)
- Ambiguous contacts

Android profiler for performance
- Attempt to multithread
Had locking issues

Testing implementations

__Evaluation__

Mock testing

Evaluation of semantic similarity
(pick action maps to knife instead of grab!)
Evaluation project details
Create table of scores of other methods, link to csvs in project

Evaluate speed of recognition, performance (pc, phone, raspberry pi)
Niote differences in JVM and DVM for Android in performance (not considered)
Number of tests:
Overworld: 44
Battle: 67
Total time for all tests: 3m 59s 113ms
WordNet test time: 41s 9ms
Time for other tests: 198104ms = 3m 18s 104ms
Time for one test: 1785ms = 1s 784ms
Speed tests in evaluation section

(By end of Monday)

Create evaluation sheet

By end of Tuesday

Evaluation of Helper Mechanisms:
- Evaluation of effectivenesss of learning mechanism
- Evaluation of other extensions (multipe commands, confirmation, suggestions)
- Evaluation of effectiveness of slot-filling (need sentence mapper)

Toggles:
- All features
- semantic similarity + suggestions
- synonym mapping
- match ignore
- sentence matching
Create cummulative line graph
no features -> semantic -> etc.

These should be quantitative, accumative results
Use accumulate bar chart on number of tests to see how the pass rate increases
with each mechanism activiated.

Qualititative
Diffiult to measure ease of sue quantitavely
Create flow diagrams of process

hard-coded but 100% correct
easy and flexible, but may incorrectly detect some commands

Give estimate example of number of lines
Ask question

Evaluate ease of development (adding voice commands, survey)

TODO: create user guide for adding commands. Evaluate eas of use with it.

TODO: crate evaluation of automatically assigning phyiscal
properties

Evaluate ease of room generation (survey)

Limitations:
- Requires Java code/ Java inheritence hierarchy to be compatible
- Only single-word actions, targets and contexts
- Can't handle negatives (call dan with no audio)
- Action cannot have thesame string as target or context
- Ambiguous words (throw the match)
- Lots of targets, few contexts? (ActionTargetMap)

By end of Thursday

__Conclusion__
Deliverables
- Created an RPG by applying systems
- euicker to add voice commands, no need to hard code
- entirely offline, can be used with embedded systems or robots,
privacy concerns with other services
- created library

Contributions

- Created GitHub gist
- Evaluation for best semantic similiarty methods, performance
- Explored ideas for ease of room development, assigning properties
 
 Future Work
- Mention language changes
- Combining methods and getting weighting (use ML/deep learning to find best methods)
    -- algoruthnm would leanr weightings for semantic similarities, RNNs
- Multithreading for performance
- Hand-free (wake-word detection) and TTs output
- JCN method - currently broken

Appendix:
Screeenshots of app
Include github statistics
Other evaluation tests

TODO: evaluation for room generation (create complex room and diff)
Note: RRR is a reference location
Don't forget to add references in!!!!!!!!!!!!
Add page references and links for easier navigation

Fix double quotes
