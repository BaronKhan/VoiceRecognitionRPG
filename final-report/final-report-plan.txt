Title
Abstract
Introduction
Motivation? (ASk first)
Background - http://www.speech.cs.cmu.edu/tools/lmtool-new.html
The details (Implementation)
Testing
Evaluation/Discussion
Conclusions and further work (library, conferencing)
Bibliography
(Appendices)

---

Background:

Cosine similarity of definitions
Deep parsing in Watson

---

__Design__
- Platform choice
- System UML Overview
- Game Design Overview
- NLP Techniques used


Overview:
- Chose Android

System Overview:
Explain slot filling approach
NLP techniques (semanitc similarity)

Explain each step in the flow chart in more detail.

Show a UML diagram of the following:
- MainActivity
- VoiceControl
- GameState
- VoiceProcess (actual NLP engine)
- SemanticSimilarity (singleton, mention Android activity states)
Explain each one

Explain QOL features:
- synonyms
- match ignores
- Confirmation
- multiple commands
- sentence mapping
- multiple targets

Game Design Overview:
- Battle, Overworld, Zork-like
- Show UML class diagram

Game Design Extensions:
- Room descriptions
- Properties of objects (PhysicalObject)

- Performance Engineering (none)


__Implementation__

UI:

General code
- GlobalState
- VoiceProcess
- SemanticSimiliarty
- AmbiguousHandler
- CustomLexicalDatabase
- ContextActionMaps and Action
- Entity
- Action
- Synonym Map code
- SentenceMapper
- MultipleCommandProcess

Settings

CustomLexicalDatabase: mention meronyms, holonyms, etc.

Custom Lesk: mention use of Fernflower decompiler and altered code.

Android profiler for performance
- Attempt to multithread
Had locking issues

Testing implementations

__Evaluation__

Mock testing

Number of tests:
Overworld: 44
Battle: 67
Total time for all tests: 3m 59s 113ms
WordNet test time: 41s 9ms
Time for other tests: 198104ms = 3m 18s 104ms
Time for one test: 1785ms = 1s 784ms

Evaluation of effectiveness of slot-filling

Evaluation of semantic similarity
(pick action maps to knife instead of grab!)

Evaluation of effectivenesss of learning mechanism

Evaluation of other extensions (multipe commands, confirmation, suggestions)

Limitations:
- Only single-word actions, targets and contexts
- Can't handle negatives (call dan with no audio)
- Action cannot have the same string as target or context
- Ambiguous words (throw the match)
- Lots of targets, few contexts? (ActionTargetMap)

Contributions
- entirely offline, can be used with embedded systems or robots

- Created GitHub gist (even if I can't get the Gloss working)

__Conclusion and Future Work__

- Mention language changes
- Combining methods and getting weighting (use ML to find best ones)
- Hand-free (wake-word detection)
- Output nlp text based on description of room (alternative)

Appendix:
Screeenshots of app
Include github statistics
Other evaluation tests

Note: RRR is a reference location

Fix double quotes
