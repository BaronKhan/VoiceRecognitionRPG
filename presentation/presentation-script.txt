Slide 1:

In the last 4 years, I've worked on a couple of projects in my
spare time as well as in industry where I've had to add voice commands
to some sort of application or system.

Slide 2:

Here, I have a simple text-based game, where the player confronts
an angry troll that they have to fight
Let's say I needed to add voice commands to a video game now. If I
wanted to attack an enemy in a game with a sword, I could say it in
a lot of ways, and here are some examples. Or if I wanted to heal,
I could say it like this. So how would I implement a system that
would where I would be able to say a huge variation of phrases that map
to the same intent?

Slide 3:

Well, a few years ago I would've done something really silly, where
I hard-code each possible phrase that the user can say and check the
input in a series of if and else statements, or a switch statement. This
is clearly a terrible idea. Not only is this really time-consuming, but
it does not cover every possible variations of phrases which mean to
attack with a sword, such as, "fight with a sword", so this would just
go on forever.

Slide 4:

Probably one year ago, I would've used something more sensible to add
the voice commands, by specifiying the strcuture tof the phrases which
can be accepted, as shown here. So this is quite similar to regex,
so you can say things like, [give regex examples)]. That's a pretty
neat system. The only problem is after about a few minutes of typing
this...

[click]

... this expression can get incredibly complex, and even if it was
longer, it wouldn't cover all possible variations of commands. And this
is also only just for attack with a sword. You would have to write
a new expression for each possible action in your game, so this, too,
isn't feasible.

Slide 5:

Now, all I have to do is create this table in a csv file, which
maps different actions to contexts for which the action can be applied
with. With just this table, I can say commands such as,

[switch to app]

- "attack with a sword"
- "hit the troll using something sharp"
- "fight with a hammer and then heal with a potion"
- "launch an assault using a sword and a hammer and then recover"

[switch to slides]

That's it. The system only needs this table to say all those commands,
and more.

Slide 6:

So, what exactly is my project? My project was to build a text-based
adventure game where the player explores a world and interacts with
objects to solve puzzles, while battling goblins and trolls along
the way, all controlled using their voice. Sounds like a fun project,
but the goal wasn't to just make a game. The goal was to explore ways of
making it easier for a developer to create these types of games,
and see whether the techniques applied could be applied to other games
or applications to ease development.

Several areas were identified that could be improved. The first one,
which was also the main focus of the project, was finding an easier way
of adding voice commands to the game without having to hard-code the
acceptable inputs. Other areas for reducing the workload of a developer
were also explored, such as automatically assigning physical properties
to objects in the game. For instance, if an object can be broken by a
player if they say, "Break that object". Or generating new rooms in the
game without having to manually place objects in them. But the main
focus was on the first point, to create a system to easily add voice
commands to a game, so the user is not limited in how they can execute
a certain intent with their voice.

Slide 7:

But why create this system from scratch when there are APIs that already
do something similar? For instance, there's Dialogflow and and IBM's
Watson Conversation engine. With these APIs, the developer just has
to give several example phrases the at the player has to say and map
them to the correct intent. The system will then learn to detect new
variations of the phrases. But there are several limitations with these
APIs which made them unsuitable to use.

[click]

Firstly, these APIs are pay-per request, so a developer has to pay
whenever they send a voice request, which is not
desirable when a developer releases a product and has to pay every time
a player issues a voice request. Actually, one big game company called
Ubisoft used the Watson Conversation API to create a virtual-reality
Star Trek game, where the player can issue commands to their crew in a
space ship, and they can say these commands in interesting ways. But
actually, this year, they were actually planning on removing Watson
from the game, probably because they didn't want to keep paying whenever
a player made a voice request.

Another issue is that these services are exclusively cloud-based, and
require an Internet connection to process voice commands. Most games
don't require an Internet connection to play so you can play them
underground on the tube, for example. In other applications such as
embedded systems or robotics, it would be undesirable to use these
online APIs, and the only offline alterantives are the ones I showed
at the beginning, which are completely infeasible. There may potentially
be privacy concerns, since you're sending audio data to a third party.

The voice recognition system created for this project works entirely
offline, but still allows the developer to add countless variations of
commands without having to hard-code any of them, and and the accuracy
and performance of the system is quite decent.

Slide 7:

So this voice recognition system has been applied to this role-playing
game, and in this game, there are two distinct mode of play in order to
reflect the flexibility of the voice recognition system. The first one
is exploration gameplay, where the player interacts with objects around
them


Slide 8:

At the heart of the solution is the #

(Will deal with troll later)